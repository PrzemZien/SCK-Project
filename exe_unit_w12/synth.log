
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: exe_unit_w12.sv
Parsing SystemVerilog input from `exe_unit_w12.sv' to AST representation.
Generating RTLIL representation for module `\exe_unit_w12'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \exe_unit_w12_rtl

2.2. Analyzing design hierarchy..
Top module:  \exe_unit_w12_rtl
Removing unused module `\exe_unit_w12'.
Removed 1 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \exe_unit_w12_rtl

3.1.2. Analyzing design hierarchy..
Top module:  \exe_unit_w12_rtl
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$exe_unit_w12.sv:20$8 in module exe_unit_w12_rtl.
Marked 15 switch rules as full_case in process $proc$exe_unit_w12.sv:20$8 in module exe_unit_w12_rtl.
Marked 1 switch rules as full_case in process $proc$exe_unit_w12.sv:111$31 in module exe_unit_w12_rtl.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\exe_unit_w12_rtl.$proc$exe_unit_w12.sv:20$8'.
     1/38: $8\s_status[3:3]
     2/38: $7\s_status[3:3]
     3/38: $4\P[3:0]
     4/38: $3\P[3:0]
     5/38: $2\P[3:0]
     6/38: $1\P[3:0]
     7/38: $6\s_status[1:1]
     8/38: $7\s_result[3:0] [3]
     9/38: $7\s_result[3:0] [0]
    10/38: $7\s_result[3:0] [2]
    11/38: $7\s_result[3:0] [1]
    12/38: $5\s_status[0:0]
    13/38: $6\s_result[3:0]
    14/38: $4\s_status[0:0]
    15/38: $5\s_result[3:0]
    16/38: $3\s_status[2:2]
    17/38: $2\b[3:0] [3]
    18/38: $2\k[31:0]
    19/38: $2\b[3:0] [1]
    20/38: $2\b[3:0] [0]
    21/38: $4\s_result[3:0]
    22/38: $2\b[3:0] [2]
    23/38: $3\s_result[3:0]
    24/38: $2\s_result[3:0]
    25/38: $1\s_result[3:0]
    26/38: $1\k[31:0]
    27/38: $1\b[3:0]
    28/38: $2\s_status[2:2]
    29/38: $1\s_status[0:0]
    30/38: $0\s_status[3:0] [3]
    31/38: $0\p[31:0]
    32/38: $0\P[3:0]
    33/38: $0\s_status[3:0] [1]
    34/38: $0\k[31:0]
    35/38: $0\b[3:0]
    36/38: $0\s_status[3:0] [2]
    37/38: $0\s_status[3:0] [0]
    38/38: $0\s_result[3:0]
Creating decoders for process `\exe_unit_w12_rtl.$proc$exe_unit_w12.sv:111$31'.
     1/4: $1\o_result[3:0]
     2/4: $1\o_status[3:0]
     3/4: $0\o_status[3:0]
     4/4: $0\o_result[3:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\exe_unit_w12_rtl.\P' from process `\exe_unit_w12_rtl.$proc$exe_unit_w12.sv:20$8'.
No latch inferred for signal `\exe_unit_w12_rtl.\s_result' from process `\exe_unit_w12_rtl.$proc$exe_unit_w12.sv:20$8'.
No latch inferred for signal `\exe_unit_w12_rtl.\s_status' from process `\exe_unit_w12_rtl.$proc$exe_unit_w12.sv:20$8'.
No latch inferred for signal `\exe_unit_w12_rtl.\b' from process `\exe_unit_w12_rtl.$proc$exe_unit_w12.sv:20$8'.
No latch inferred for signal `\exe_unit_w12_rtl.\p' from process `\exe_unit_w12_rtl.$proc$exe_unit_w12.sv:20$8'.
Latch inferred for signal `\exe_unit_w12_rtl.\k' from process `\exe_unit_w12_rtl.$proc$exe_unit_w12.sv:20$8': $auto$proc_dlatch.cc:409:proc_dlatch$250
No latch inferred for signal `\exe_unit_w12_rtl.\o_result' from process `\exe_unit_w12_rtl.$proc$exe_unit_w12.sv:111$31'.
No latch inferred for signal `\exe_unit_w12_rtl.\o_status' from process `\exe_unit_w12_rtl.$proc$exe_unit_w12.sv:111$31'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 15 empty switches in `\exe_unit_w12_rtl.$proc$exe_unit_w12.sv:20$8'.
Removing empty process `exe_unit_w12_rtl.$proc$exe_unit_w12.sv:20$8'.
Found and cleaned up 1 empty switch in `\exe_unit_w12_rtl.$proc$exe_unit_w12.sv:111$31'.
Removing empty process `exe_unit_w12_rtl.$proc$exe_unit_w12.sv:111$31'.
Cleaned up 16 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.
<suppressed ~35 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..
Removed 30 unused cells and 129 unused wires.
<suppressed ~33 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module exe_unit_w12_rtl..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w12_rtl'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \exe_unit_w12_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$174: \i_argA -> { 1'0 \i_argA [2:0] }
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$116.
    dead port 2/2 on $mux $procmux$118.
    dead port 2/2 on $mux $procmux$123.
    dead port 2/2 on $mux $procmux$128.
    dead port 2/2 on $mux $procmux$134.
    dead port 1/2 on $mux $procmux$174.
    dead port 2/2 on $mux $procmux$176.
    dead port 2/2 on $mux $procmux$183.
    dead port 2/2 on $mux $procmux$100.
    dead port 2/2 on $mux $procmux$102.
    dead port 2/2 on $mux $procmux$59.
    dead port 2/2 on $mux $procmux$61.
    dead port 2/2 on $mux $procmux$63.
    dead port 2/2 on $mux $procmux$73.
    dead port 2/2 on $mux $procmux$75.
    dead port 2/2 on $mux $procmux$77.
    dead port 2/2 on $mux $procmux$108.
    dead port 2/2 on $mux $procmux$85.
    dead port 2/2 on $mux $procmux$87.
    dead port 2/2 on $mux $procmux$89.
    dead port 2/2 on $mux $procmux$110.
    dead port 2/2 on $mux $procmux$98.
Removed 22 multiplexer ports.
<suppressed ~8 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \exe_unit_w12_rtl.
    New ctrl vector for $pmux cell $procmux$200: { $procmux$135_CMP $auto$opt_reduce.cc:132:opt_mux$252 }
    New ctrl vector for $pmux cell $procmux$205: { $auto$opt_reduce.cc:132:opt_mux$254 $procmux$103_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$251: { $procmux$103_CMP $procmux$184_CMP $procmux$189_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$253: { $procmux$135_CMP $procmux$184_CMP $procmux$189_CMP }
  Optimizing cells in module \exe_unit_w12_rtl.
Performed a total of 4 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w12_rtl'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..
Removed 0 unused cells and 42 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \exe_unit_w12_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \exe_unit_w12_rtl.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w12_rtl'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell exe_unit_w12_rtl.$add$exe_unit_w12.sv:53$16 ($add).
Removed top 28 bits (of 32) from port Y of cell exe_unit_w12_rtl.$add$exe_unit_w12.sv:53$16 ($add).
Removed top 29 bits (of 32) from port B of cell exe_unit_w12_rtl.$lt$exe_unit_w12.sv:64$19 ($lt).
Removed top 31 bits (of 32) from port B of cell exe_unit_w12_rtl.$ge$exe_unit_w12.sv:62$18 ($ge).
Removed top 31 bits (of 32) from port B of cell exe_unit_w12_rtl.$add$exe_unit_w12.sv:96$24 ($add).
Removed top 28 bits (of 32) from port Y of cell exe_unit_w12_rtl.$add$exe_unit_w12.sv:96$24 ($add).
Removed top 31 bits (of 32) from port B of cell exe_unit_w12_rtl.$add$exe_unit_w12.sv:96$26 ($add).
Removed top 28 bits (of 32) from port Y of cell exe_unit_w12_rtl.$add$exe_unit_w12.sv:96$26 ($add).
Removed top 31 bits (of 32) from port B of cell exe_unit_w12_rtl.$add$exe_unit_w12.sv:96$28 ($add).
Removed top 28 bits (of 32) from port Y of cell exe_unit_w12_rtl.$add$exe_unit_w12.sv:96$28 ($add).
Removed top 2 bits (of 4) from port B of cell exe_unit_w12_rtl.$eq$exe_unit_w12.sv:101$29 ($eq).
Removed top 1 bits (of 4) from port B of cell exe_unit_w12_rtl.$eq$exe_unit_w12.sv:105$30 ($eq).
Removed top 3 bits (of 4) from mux cell exe_unit_w12_rtl.$procmux$49 ($mux).
Removed top 2 bits (of 4) from port B of cell exe_unit_w12_rtl.$procmux$58_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell exe_unit_w12_rtl.$procmux$84_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell exe_unit_w12_rtl.$procmux$97_CMP0 ($eq).
Removed cell exe_unit_w12_rtl.$procmux$164 ($mux).
Removed top 1 bits (of 2) from port B of cell exe_unit_w12_rtl.$procmux$184_CMP0 ($eq).
Removed top 3 bits (of 4) from wire exe_unit_w12_rtl.$1\P[3:0].
Removed top 28 bits (of 32) from wire exe_unit_w12_rtl.$add$exe_unit_w12.sv:53$16_Y.
Removed top 28 bits (of 32) from wire exe_unit_w12_rtl.$add$exe_unit_w12.sv:96$24_Y.

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~164 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module exe_unit_w12_rtl:
  creating $macc model for $add$exe_unit_w12.sv:29$9 ($add).
  creating $macc model for $add$exe_unit_w12.sv:53$16 ($add).
  creating $macc model for $add$exe_unit_w12.sv:96$24 ($add).
  creating $macc model for $add$exe_unit_w12.sv:96$26 ($add).
  creating $macc model for $add$exe_unit_w12.sv:96$28 ($add).
  creating $alu model for $macc $add$exe_unit_w12.sv:96$28.
  creating $alu model for $macc $add$exe_unit_w12.sv:96$26.
  creating $alu model for $macc $add$exe_unit_w12.sv:96$24.
  creating $alu model for $macc $add$exe_unit_w12.sv:53$16.
  creating $alu model for $macc $add$exe_unit_w12.sv:29$9.
  creating $alu model for $ge$exe_unit_w12.sv:33$10 ($ge): new $alu
  creating $alu model for $ge$exe_unit_w12.sv:62$18 ($ge): new $alu
  creating $alu model for $lt$exe_unit_w12.sv:64$19 ($lt): new $alu
  creating $alu cell for $lt$exe_unit_w12.sv:64$19: $auto$alumacc.cc:474:replace_alu$261
  creating $alu cell for $ge$exe_unit_w12.sv:62$18: $auto$alumacc.cc:474:replace_alu$272
  creating $alu cell for $ge$exe_unit_w12.sv:33$10: $auto$alumacc.cc:474:replace_alu$281
  creating $alu cell for $add$exe_unit_w12.sv:29$9: $auto$alumacc.cc:474:replace_alu$290
  creating $alu cell for $add$exe_unit_w12.sv:53$16: $auto$alumacc.cc:474:replace_alu$293
  creating $alu cell for $add$exe_unit_w12.sv:96$24: $auto$alumacc.cc:474:replace_alu$296
  creating $alu cell for $add$exe_unit_w12.sv:96$26: $auto$alumacc.cc:474:replace_alu$299
  creating $alu cell for $add$exe_unit_w12.sv:96$28: $auto$alumacc.cc:474:replace_alu$302
  created 8 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.
<suppressed ~2 debug messages>

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w12_rtl'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \exe_unit_w12_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \exe_unit_w12_rtl.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$288: { $auto$rtlil.cc:1832:Not$285 $auto$rtlil.cc:1835:ReduceAnd$287 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$264: { $auto$alumacc.cc:490:replace_alu$262 [0] $auto$alumacc.cc:490:replace_alu$262 [1] $auto$alumacc.cc:490:replace_alu$262 [2] $auto$alumacc.cc:490:replace_alu$262 [3] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$277: { $auto$alumacc.cc:490:replace_alu$273 [0] $auto$alumacc.cc:490:replace_alu$273 [1] $auto$alumacc.cc:490:replace_alu$273 [2] $auto$alumacc.cc:490:replace_alu$273 [3] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$286: { $auto$alumacc.cc:490:replace_alu$282 [0] $auto$alumacc.cc:490:replace_alu$282 [1] $auto$alumacc.cc:490:replace_alu$282 [2] $auto$alumacc.cc:490:replace_alu$282 [3] }
  Optimizing cells in module \exe_unit_w12_rtl.
Performed a total of 4 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w12_rtl'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \exe_unit_w12_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \exe_unit_w12_rtl.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w12_rtl'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w12_rtl'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.
<suppressed ~14 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w12_rtl'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..
Removed 1 unused cells and 5 unused wires.
<suppressed ~2 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w12_rtl'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \exe_unit_w12_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \exe_unit_w12_rtl.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w12_rtl'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
No more expansions possible.
<suppressed ~362 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.
<suppressed ~173 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w12_rtl'.
<suppressed ~90 debug messages>
Removed a total of 30 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..
Removed 29 unused cells and 298 unused wires.
<suppressed ~30 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\exe_unit_w12_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 176 gates and 189 wires to a netlist network with 11 inputs and 8 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:            ANDNOT cells:       22
ABC RESULTS:              AOI3 cells:       15
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:        9
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        9
ABC RESULTS:               NOT cells:        6
ABC RESULTS:              OAI3 cells:        7
ABC RESULTS:              OAI4 cells:        3
ABC RESULTS:                OR cells:       13
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:       12
ABC RESULTS:               XOR cells:        4
ABC RESULTS:        internal signals:      170
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        8
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w12_rtl.
<suppressed ~2 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w12_rtl'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..
Removed 0 unused cells and 111 unused wires.
<suppressed ~4 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \exe_unit_w12_rtl

3.25.2. Analyzing design hierarchy..
Top module:  \exe_unit_w12_rtl
Removed 0 unused modules.

3.26. Printing statistics.

=== exe_unit_w12_rtl ===

   Number of wires:                114
   Number of wire bits:            158
   Number of public wires:           8
   Number of public wire bits:      52
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                114
     $_ANDNOT_                      22
     $_AND_                          8
     $_AOI3_                        15
     $_AOI4_                         1
     $_MUX_                          9
     $_NAND_                         3
     $_NOR_                          9
     $_NOT_                          6
     $_OAI3_                         7
     $_OAI4_                         3
     $_ORNOT_                        4
     $_OR_                          13
     $_XNOR_                        10
     $_XOR_                          4

3.27. Executing CHECK pass (checking for obvious problems).
checking module exe_unit_w12_rtl..
found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `\exe_unit_w12_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 114 gates and 125 wires to a netlist network with 11 inputs and 8 outputs.

4.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       60
ABC RESULTS:               NOT cells:       26
ABC RESULTS:                OR cells:       53
ABC RESULTS:               XOR cells:       10
ABC RESULTS:        internal signals:      106
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        8
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w12_rtl..
Removed 0 unused cells and 125 unused wires.
<suppressed ~1 debug messages>

6. Executing Verilog backend.
Dumping module `\exe_unit_w12_rtl'.

7. Printing statistics.
